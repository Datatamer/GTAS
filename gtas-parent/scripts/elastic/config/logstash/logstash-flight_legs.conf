input {
  jdbc {
    jdbc_connection_string => "jdbc:mariadb://localhost:3306/gtas?sessionVariables=sql_mode=ANSI_QUOTES"
    jdbc_user => "root"
    jdbc_password => "admin"
    sql_log_level => "debug"
    jdbc_driver_library => "./config/mariadb-java-client-2.3.0.jar"
    jdbc_driver_class => "org.mariadb.jdbc.Driver"
    statement_filepath => "./config/flight_legs.sql"
    schedule => "* * * * *"
    jdbc_paging_enabled => true
    jdbc_page_size => "10000"
  }
}

filter {
  aggregate { 
    task_id => "%{message_id}"
    code => "
    
    map['id'] = event.get('id')
    map['flight_legs'] ||= []

    if(event.get('message_id') != nil)
      leg_exists = map['flight_legs'].any? { |leg| leg['id'] == event.get('leg.id') }

      if(!leg_exists)
        map['flight_legs'].push({
          'id' => event.get('leg.id'),
          'leg_number' => event.get('leg_number'),
          'origin' => event.get('origin'),
          'flight_number' => event.get('flight_number'),
          'destination_coordination.lon' => event.get('flight_leg.destination.lon'),
          'destination_coordination.lat' => event.get('flight_leg.destination.lat'),
          'origin_coordination.lon' => event.get('flight_leg.origin.lon'),
          'origin_coordination.lat' => event.get('flight_leg.origin.lat'),
          'message_id' => event.get('message_id'),
          'etd' => event.get('etd'),
          'eta' => event.get('eta'),
          'destination' => event.get('destination'),
          'origin_country' => event.get('origin_country'),
          'destination_country' => event.get('destination_country')
          # 'origin_coordination' => event.get('flight_leg.origin.coordinates'),
          # 'destination_coordination' => event.get('flight_leg.destination.coordinates')
        })
      end
    end
    event.cancel()
    "
    push_previous_map_as_event => true
    
    timeout => 5
    map_action => create_or_update
    timeout_tags => ["aggregate"]
    
    
  }

  mutate {
    remove_field => [ 
     "tags"
    ]

  }
}

filter {
   
ruby {
       code => "
        flight_legs = []
        event.get('flight_legs').each {|k| 
          
            k['origin_coordination']={}
            k['destination_coordination']={}
          
            k['origin_coordination']['lon']=k['origin_coordination.lon']
            k['origin_coordination']['lat']=k['origin_coordination.lat']
            k['destination_coordination']['lon']=k['destination_coordination.lon']
            k['destination_coordination']['lat']=k['destination_coordination.lat']
          
            k.delete('origin_coordination.lon')
            k.delete('origin_coordination.lat')
            k.delete('destination_coordination.lon')
            k.delete('destination_coordination.lat')

            flight_legs << k
        }
        
        event.set('flight_legs', flight_legs)
       "
     }

}

output {

    elasticsearch {
        hosts => ["http://localhost:9200"]
        index => "flightpax"
        action => "update"
        document_id => "%{id}"
        doc_as_upsert => true
        #user => "elastic"
        #password => "changeme"
        template => "./config/flightpax_template.json"
        template_name => "flightpax_template"
        template_overwrite => true
    }

    stdout {
      codec => "rubydebug"
    }
}